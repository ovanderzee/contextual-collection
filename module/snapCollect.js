const t=function(t){return t&&t.toString},e=function(t){return t.toString()},n=function(t){const e=Object.create(Object.getPrototypeOf(this));return e.add(...t),e},r={delete:function(n){t(n)&&delete this[e(n)]},get:function(n){if(t(n))return this[e(n)]},has:function(n){if(t(n))return Object.prototype.hasOwnProperty.call(this,e(n))},get length(){return Object.keys(this).length},set:function(n,r){t(n)&&(this[e(n)]=r)}},i={entries:function(){return Object.entries(this)},keys:function(){return Object.keys(this)},values:function(){return Object.values(this)},where:function(t){let e=Object.values(this);return Object.keys(t).forEach(n=>{e=e.filter(e=>JSON.stringify(e[n])==JSON.stringify(t[n]))}),e},combination:function(t){Array.isArray(t)&&(t=n.call(this,t));return function(t,e){const n=[...t,...e],r=new Set(n);return Array.from(r)}(this.keys(),t.keys()).map(e=>this.get(e)||t.get(e))},intersection:function(t){Array.isArray(t)&&(t=n.call(this,t));return function(t,e){let n={};return t.forEach(t=>n[t]=1),e.filter(t=>{if(1===n[t])return delete n[t],t})}(this.keys(),t.keys()).map(t=>this.get(t))}},s=function(t){if(!Boolean(t))throw"snapCollect: identifier must evaluate to true";return r.identifier=t,r.name="SnapCollect",Object.assign(r,function(t){return{add:function(){const e=Array.from(arguments);e.forEach(e=>this.set(e[t],e))},clear:function(){const t=Object.keys(this);for(let e of t)this.delete(e)},toggle:function(e){const n=e[t];this.has(n)?this.delete(n):this.set(n,e)}}}(t),i),r};export default function(t){const e=s(t);return Object.create(e)}
//# sourceMappingURL=snapCollect.js.map
