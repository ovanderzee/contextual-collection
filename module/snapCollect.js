const t=function(t){return t&&t.toString},e=function(t){return t.toString()},n=function(t){const e=Object.create(Object.getPrototypeOf(this));return e.add(...t),e},r=function(t,e){const n=Object.entries(t),r=Object.values(this),i=(s=this,Object.getPrototypeOf(s).identifier);var s;for(let t of r){let r=!0;n.forEach(e=>{r=r&&JSON.stringify(t[e[0]])===JSON.stringify(e[1])}),r===e&&this.delete(t[i])}},i={delete:function(n){t(n)&&delete this[e(n)]},get:function(n){if(t(n))return this[e(n)]},has:function(n){if(t(n))return Object.prototype.hasOwnProperty.call(this,e(n))},get length(){return Object.keys(this).length},set:function(n,r){t(n)&&(this[e(n)]=r)}},s=function(){let t=Boolean(arguments.length);return Array.from(arguments).forEach(e=>{t=t&&"number"==typeof e&&Number.isFinite(e)}),t},c=function(t){try{return JSON.stringify(t)}catch(t){return""}},o=function(t){let e;try{return e=String(t),"[object Object]"===e&&(e=c(t)),e}catch(e){return c(t)}},u={entries:function(){return Object.entries(this)},keys:function(){return Object.keys(this)},values:function(){return Object.values(this)},sort:function(){const t=Object.values(this),e=function(t){try{return!t.toString}catch(t){return!0}};for(let n=arguments.length-1;n>-1;n--){const r=arguments[n];t.sort((function(n,i){if(s(n[r],i[r]))return n[r]-i[r];if(e(n[r])&&e(i[r])){const t=o(n[r]),e=o(n[r]);return t.localeCompare(e)}if(e(n[r]))return t.length;if(e(i[r]))return 0-t.length;const c=n[r].toString(),u=i[r].toString();return c.localeCompare(u)}))}return t},where:function(t){let e=Object.values(this);return Object.keys(t).forEach(n=>{e=e.filter(e=>JSON.stringify(e[n])===JSON.stringify(t[n]))}),e},combination:function(t){Array.isArray(t)&&(t=n.call(this,t));return function(t,e){const n=[...t,...e],r=new Set(n);return Array.from(r)}(this.keys(),t.keys()).map(e=>this.get(e)||t.get(e))},intersection:function(t){Array.isArray(t)&&(t=n.call(this,t));return function(t,e){let n={};return t.forEach(t=>n[t]=1),e.filter(t=>{if(1===n[t])return delete n[t],t})}(this.keys(),t.keys()).map(t=>this.get(t))}},f=function(t){if(!Boolean(t))throw"snapCollect: identifier must evaluate to true";return i.identifier=t,i.name="SnapCollect",Object.assign(i,function(t){return{add:function(){const e=Array.from(arguments);return e.forEach(e=>this.set(e[t],e)),Object.values(this)},clear:function(){const t=Object.keys(this);for(let e of t)this.delete(e)},cross:function(t){Array.isArray(t)&&(t=n.call(this,t));const e=t.keys(),r=Object.keys(this);for(let t of r)e.includes(t)||this.delete(t);return Object.values(this)},drop:function(t){return r.call(this,t,!0),Object.values(this)},hold:function(t){return r.call(this,t,!1),Object.values(this)},toggle:function(e){const n=e[t];return this.has(n)?this.delete(n):this.set(n,e),Object.values(this)}}}(t),u),i};export default function(t){const e=f(t);return Object.create(e)}
//# sourceMappingURL=snapCollect.js.map
